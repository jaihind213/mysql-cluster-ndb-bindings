AC_INIT([ndb-bindings],[0.7.1])
AC_CONFIG_AUX_DIR([.])
AM_INIT_AUTOMAKE([1.9 tar-ustar])
AC_CONFIG_HEADERS([config.h])

AC_DEFINE([SWIG_TYPE_TABLE],[ndbbindings],[Type Table name for SWIG symbol table])
AC_ARG_WITH([debug],
    [AS_HELP_STRING([--with-debug],
       [Build a debugging version @<:@default=no@:>@])],
    [with_debug=$withval],
    [with_debug=no])

AC_ARG_WITH([async-time],
  [AS_HELP_STRING([--with-async-time],
      [Produce timing reports for Async transactions @<:@default=no@:>@])],
    [with_asynctime=$withval],
    [with_asynctime=no])

AS_IF([test "x$with_asynctime" = "xyes"],
      [AC_DEFINE([DEBUG_ASYNC_TIMES],1,
	[Define to 1 if you want to profile async callbacks])],
      [])

AC_LANG(C++)
AC_CANONICAL_HOST
ACX_PTHREAD()
LT_INIT
LT_LANG(C)
LT_LANG(C++)

sinclude(m4/cppunit.m4)

AM_PATH_CPPUNIT()
AC_PATH_PROG([FIND],find)
AS_IF([test "x$FIND" = "x"],
      [AC_MSG_ERROR([Can't locate find])])
AS_IF([test "x$GREP" = "x"],
      [AC_MSG_ERROR([Can't locate grep])])
AS_IF([test "x$SED" = "x"],
      [AC_MSG_ERROR([Can't locate sed])])

GLOBAL_INCLUDES="-I\${top_srcdir} -I\${top_builddir} -I\$(top_srcdir)/mgmpp -I\$(top_srcdir)/ndbpp "

CXXFLAGS="${GLOBAL_INCLUDES}"
CFLAGS="${GLOBAL_INCLUDES}"


AC_PROG_SWIG(1.3.31)
SWIG_ENABLE_CXX()
AC_SUBST(SWIG)

sinclude(m4/with_csharp.m4)
sinclude(m4/with_java.m4)
sinclude(m4/with_lua.m4)
sinclude(m4/with_mysql.m4)
sinclude(m4/with_perl.m4)
sinclude(m4/with_php.m4)
sinclude(m4/with_python.m4)
sinclude(m4/with_ruby.m4)


WITH_MYSQL()

WITH_JAVA()

JAVAOPTS="$JAVAOPTS -target 1.5"

WITH_CSHARP()

WITH_PYTHON()

WITH_PHP()
WITH_LUA()

WITH_PERL()

WITH_RUBY()

SWIG_NDB_SOURCES="\${top_srcdir}/interface/globals.i "
SWIG_MGM_SOURCES="\${top_srcdir}/interface/globals.i "

for f in `${FIND} ${srcdir}/interface/ndbapi | ${GREP} -v '\#' | ${GREP} '.i$'` ; do  
  SWIG_NDB_SOURCES="\${top_srcdir}/$f ${SWIG_NDB_SOURCES} "
done
for f in `${FIND} ${srcdir}/interface/mgmapi | ${GREP} -v '\#' | ${GREP} '.i$'` ; do  
  SWIG_MGM_SOURCES="\${top_srcdir}/$f ${SWIG_MGM_SOURCES} "
done
  
SWIG_SOURCES="${SWIG_MGM_SOURCES} ${SWIG_NDB_SOURCES}"

for f in `${FIND} ${srcdir}/ndbpp | ${EGREP} '(.h|.c|.hpp|.cpp)$' ` ; do
  NDBPP_SOURCES="\${top_srcdir}/$f ${NDBPP_SOURCES} "
done
for f in `${FIND} ${srcdir}/mgmpp | ${EGREP} '(.h|.c|.hpp|.cpp)$' ` ; do
  MGMPP_SOURCES="\${top_srcdir}/$f ${MGMPP_SOURCES} "
done

SWIG_DIR="\${top_srcdir}/interface"

SWIG="$SWIG \${DEFS} -DDOXYGEN_SHOULD_SKIP_INTERNAL=1 \${HAVE_CGE63} ${GLOBAL_INCLUDES}"
GENERATED="# This file is autogenerated!" 
AC_SUBST(GENERATED)

AC_ARG_ENABLE([warnings],
    [AS_HELP_STRING([--enable-warnings],
       [Toggle warnings @<:@default=off@:>@])],
    [ac_warnings="$enableval"],
    [ac_warnings="no"])

AC_ARG_ENABLE([pedantic-warnings],
    [AS_HELP_STRING([--enable-pedantic-warnings],
       [Toggle pedanticness @<:@default=off@:>@])],
    [ac_warn_pedantic="$enableval"],
    [ac_warn_pedantic="no"])

AC_ARG_ENABLE([fail],
    [AS_HELP_STRING([--enable-fail],
       [Turn warnings into failures @<:@default=off@:>@])],
    [ac_warn_fail="$enableval"],
    [ac_warn_fail="no"])

AC_ARG_ENABLE([unreachable],
    [AS_HELP_STRING([--enable-unreachable],
       [Enable warnings about unreachable code @<:@default=off@:>@])],
    [ac_warn_unreachable="$enableval"],
    [ac_warn_unreachable="no"])

AC_ARG_ENABLE([longlong-warnings],
    [AS_HELP_STRING([--enable-longlong-warnings],
       [Enable warnings about longlong in C++ @<:@default=off@:>@])],
    [ac_warn_longlong="$enableval"],
    [ac_warn_longlong="no"])

AC_ARG_ENABLE([strict-aliasing],
    [AS_HELP_STRING([--enable-strict-aliasing],
       [Enable warnings about stict-aliasing @<:@default=off@:>@])],
    [ac_warn_strict_aliasing="$enableval"],
    [ac_warn_strict_aliasing="no"])


# We put warnings and optimization flags in GLOBAL_CPPFLAGS, since we will
# put them in per-dir AM_CPPFLAGS. They come before
# CPPFLAGS in the build, so that User CPPFLAGS from the ENV will take effect
# over these. We put includes (above) in CXXFLAGS since that comes after, and
# we do _not_ want those to be overridden by ENV
# -02 causes problems per SWIG... although I think we should get that fixed, 
# but autoconf only defines it if GCC=yes, so it's easy to fix at this point
if test "$GCC" = "yes"
then
  
  if test "$ac_warnings" = "yes" -o "$ac_warn_pedantic" = "yes"
  then
    WARNINGS="-W -Wall"
  fi

  if test "$ac_warn_longlong" = "yes"
  then
    W_LONGLONG="-Wlong-long"
  else
    W_LONGLONG="-Wno-long-long"
  fi

  if test "$ac_warn_strict_aliasing" = "yes"
  then
    W_STRICT_ALIASING="-Wstrict-aliasing"
  else
    W_STRICT_ALIASING="-Wno-strict-aliasing"
  fi

  if test "$ac_warn_pedantic" = "yes"
  then
    GCC_PEDANTIC="-Wextra -pedantic -Wundef -Wstrict-prototypes -Wmissing-prototypes -Wmissing-declarations -Wredundant-decls ${W_STRICT_ALIASING}"
    GXX_PEDANTIC="-Wextra -pedantic -Wundef -Wredundant-decls ${W_LONGLONG} ${W_STRICT_ALIASING}"
  fi

  if test "$ac_warn_unreachable" = "yes"
  then
    W_UNREACHABLE="-Wunreachable-code"
  fi

  if test "$ac_warn_fail" = "yes"
  then
    W_FAIL="-Werror"
  fi

  GCC_WARNINGS="${WARNINGS} -std=gnu99 ${GCC_PEDANTIC} ${W_UNREACHABLE} ${W_FAIL}"
  GXX_WARNINGS="${WARNINGS} -std=gnu++98 ${GXX_PEDANTIC} ${W_UNREACHABLE} ${W_FAIL}"


  if test "$with_debug" = "yes"
  then
    GCC_OPT="-O0"
  else
    GCC_OPT="-O2"
  fi

  # -fno-strict-aliasing is required because of the casts that look like
  # arg1=*(Ndb_cluster_connection **)&jarg1;
  # where jarg1 is a jlong. Apparently, with -O2 and higher and strict 
  # aliasing on, gcc will produce assembler that does not perform this
  # assignment. 
  GLOBAL_CFLAGS="${GCC_OPT} -fno-strict-aliasing -ggdb3 ${GCC_WARNINGS} ${PTHREAD_CFLAGS}"
  GLOBAL_CPPFLAGS="${GCC_OPT} -fno-strict-aliasing -ggdb3 ${GXX_WARNINGS} ${PTHREAD_CFLAGS}"

fi

AC_SUBST(GLOBAL_CPPFLAGS)
AC_SUBST(GLOBAL_CFLAGS)

AM_CONDITIONAL(BUILD_PYTHON_SUBDIR, test "$with_python" != "no")
AM_CONDITIONAL(BUILD_PHP_SUBDIR, test "$with_php" != "no")
AM_CONDITIONAL(BUILD_PERL_SUBDIR, test "$with_perl" != "no")
AM_CONDITIONAL(BUILD_CSHARP_SUBDIR, test "$with_csharp" != "no")
AM_CONDITIONAL(BUILD_RUBY_SUBDIR, test "$with_ruby" != "no")
AM_CONDITIONAL(BUILD_JAVA_SUBDIR, test "$with_java" != "no")
AM_CONDITIONAL(BUILD_LUA_SUBDIR, test "$with_lua" != "no") 

AC_SUBST(MYSQL_INCLUDES)
AC_SUBST(SWIG_SOURCES)
AC_SUBST(SWIG_NDB_SOURCES)
AC_SUBST(SWIG_MGM_SOURCES)
AC_SUBST(NDBPP_SOURCES)
AC_SUBST(MGMPP_SOURCES)
AC_SUBST(SWIG_DIR)
AC_SUBST(PERLCCFLAGS)
AC_SUBST(PERLCPPFLAGS)
AC_SUBST(PERLLIBS)
AC_SUBST(PERL)
AC_SUBST(PYTHON)
AC_CONFIG_FILES([Makefile \
perl/Makefile \
java/Makefile \
python/Makefile \
csharp/Makefile \
ruby/Makefile \
php/Makefile \
lua/Makefile \
xml/Makefile \
mgmpp/Makefile \
ndbpp/Makefile \
cpp/Makefile \
java/ndbj.props])
AC_OUTPUT
