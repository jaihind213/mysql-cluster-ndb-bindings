/* -*- mode: java; c-basic-offset: 4; indent-tabs-mode: nil; -*-
 *  vim:expandtab:shiftwidth=4:tabstop=4:smarttab:
 *
 *  ndb-bindings: Bindings for the NDB API
 *  Copyright (C) 2008 MySQL
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */

package com.mysql.cluster.ndbj;

import com.mysql.cluster.ndbj.NdbError.Classification;
import com.mysql.cluster.ndbj.NdbError.Status;
import java.sql.SQLException;

/**
 * A NdbApiException is the base checked exception class of the NDB/J API Exception hierarchy.
 * <br>A NdbApiException is thrown if the error is generated in the cluster
 * (and can either be recovered from or requires closing some open objects).
 * It contains a message field, an error code field and a status field describing
 * the cause of the problem.
 * <br>If the error is generated by NDB/J (rather than internally in the cluster);
 * then, an error message is supplied (but no error code or error status from the cluster).
 * @see com.mysql.cluster.ndbj.NdbError
 */
public class NdbApiException extends SQLException
{
    protected static final long serialVersionUID = 2L;
    protected final NdbError errRef;

    /**
     * constructor for a NdbApiException can be created using a native
     * NdbError object.
     *
     * @param message
     * @param errPtr
     */
    public NdbApiException(String message, long errPtr)
    {
        super(message);
        errRef = new NdbError(errPtr,true);
    }

    /**
     * constructor for a NdbApiException that uses a String to describe
     * the condition that caused the exception.
     * @param message
     */
    public NdbApiException(String message)
    {
        super(message);
        errRef=null;
    }

    public NdbError getErrorObj() {
        return errRef;
    }

    /**
     * @return String a stringified message describing the cause of the exception.
     */
    @Override
    public String toString() {
        //if (errRef == null) {
        return super.toString();
        //}
        //return "ERROR: " + errRef.getCode() + " Message: " + message
        //+ " Classification: " + errRef.getClassification();
    }

    /**
     * @return the error classification
     * @see com.mysql.cluster.ndbj.NdbError#getClassification()
     */
    public Classification getClassification() {
        if (errRef != null) {
            return errRef.getClassification();
        }
        return null;
    }

    /**
     * @return the error code
     * @see com.mysql.cluster.ndbj.NdbError#getCode()
     */
    public int getCode() {
        if (errRef == null) {
            return -1;
        }
        return errRef.getCode();
    }

    /**
     * @return the error status
     * @see com.mysql.cluster.ndbj.NdbError#getStatus()
     */
    public Status getStatus() {
        if (errRef == null) {
            return Status.UnknownResult;
        }
        return errRef.getStatus();
    }
}
